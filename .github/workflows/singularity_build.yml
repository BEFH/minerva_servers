name: Singularity Build (native)
on: 
  push:
    # Edit the branches here if you want to change deploy behavior
    branches:
      - main
      - master

  # Do the builds on all pull requests (to test them)
  pull_request: []

  release:
    types: [created]

jobs:
  recipes:
    name: "Find Singularity recipes"
    runs-on: ubuntu-latest
    outputs:
      recipes: ${{ steps.ff.outputs.files }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Find recipe files (json output)
        id: ff
        run: |
          flist="$(
            find . -name "*Singularity*" |
            xargs -d \\n printf \"%s\", |
            sed -e 's/^/[/' -e 's/,$/]/'
          )"
          echo $flist
          echo "files=$flist" >> $GITHUB_OUTPUT

  changes:
    name: "Changed Singularity Recipes"
    if: github.event_name != 'release'
    runs-on: ubuntu-latest
    outputs:
      recipes: ${{ steps.format.outputs.files }}
    steps:
      - id: files
        uses: Ana06/get-changed-files@v2.3.0
        with:
          format: 'json'
          filter: '*Singularity*'
      - name: Format recipes
        id: format
        run: |
          remove_newlines() {
            tr -d "\n" <<< '${{ steps.files.outputs.added_modified }}' | \
              sed 's/^\[ "/["/'
          }
          echo $(remove_newlines)
          echo "files=$(remove_newlines)" >> $GITHUB_OUTPUT

  dump_contexts_to_log:
    needs: changes
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        id: github_context_step
        run: echo '${{ toJSON(github) }}'
      - name: Dump job context
        run: echo '${{ toJSON(job) }}'
      - name: Dump steps context
        run: echo '${{ toJSON(steps) }}'
      - name: Dump runner context
        run: echo '${{ toJSON(runner) }}'
      - name: Dump strategy context
        run: echo '${{ toJSON(strategy) }}'
      - name: Dump matrix context
        run: echo '${{ toJSON(matrix) }}'
      - name: test select_filelist
        run: echo ${{ needs.changes.result == 'success' || github.event_name == 'release' }}
  
  select_filelist:
    needs: [recipes, changes]
    if: ${{ always() && ( needs.changes.result == 'success' || github.event_name == 'release' ) }}
    runs-on: ubuntu-latest
    outputs:
      recipes: ${{ steps.select.outputs.files }}
    steps:
      - name: Select recipe list
        id: select
        run: |
          if ${{ github.event_name == 'release' }}; then
            echo 'files=${{ needs.recipes.outputs.recipes }}' >> $GITHUB_OUTPUT
          else
            echo 'files=${{ needs.changes.outputs.recipes }}' >> $GITHUB_OUTPUT
          fi
      - name: Print
        run: echo ${{ steps.select.outputs.files }}
  
  build-test-containers:
    needs: select_filelist
    if: ${{ always() && needs.select_filelist.outputs.recipes != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      # Keep going on other deployments if anything bloops
      fail-fast: false
      matrix:
        recipe: ${{ fromJson(needs.select_filelist.outputs.recipes) }}

    name: Build ${{ matrix.recipe }}
    steps:
      - name: Check out code for the container build
        uses: actions/checkout@v4

      - name: Compute Names
        env:
          recipe: ${{ matrix.recipe }}
        run: |
         if [ -f "${{ matrix.recipe }}" ]; then
            # Remove leading ./
            recipe_trimmed=${recipe#\.\/}
            # Match container name
            if [[ $recipe_trimmed =~ ^Singularity\.[^./[:space:]]+$ ]]; then
              # Singularity.name
              containername=${recipe_trimmed#Singularity\.}
            elif [[ $recipe_trimmed =~ ^[^./[:space:]]+/Singularity$ ]]; then
              # name/singularity
              containername=${recipe_trimmed%\/Singularity}
              # If the directory is "Singularity" or "singularity", use repo
              if [[ $containername =~ ^[Ss]ingularity$ ]]; then
                containername=${{ github.event.repository.name }}
              fi
            elif [[ $recipe_trimmed == "Singularity" ]]; then
              # Singularity
              containername=${{ github.event.repository.name }}
            else
              echo ERROR: Cannot determine container name from $recipe_trimmed
              exit 1
            fi
            # Build the container and name by tag
            echo "Container name is $containername."
            echo "containername=$containername" >> $GITHUB_ENV
         else
           echo "${{ matrix.recipe }} is not found."
           echo "Present working directory: $PWD"
           ls
         fi
         if ${{ github.event_name == 'release' && github.event.action == 'created' }}; then
           tag=${{ github.ref_name }}
           reponame=${{ github.event.repository.name }}
         else
           tag=${{ github.sha }}
           reponame=${{ github.event.repository.name }}_dev
         fi
         echo "Tag name is $tag."
         echo "tag=$tag" >> $GITHUB_ENV
         echo "Repo name is $reponame."
         echo "reponame=$reponame" >> $GITHUB_ENV
         owner=$(echo ${{ github.repository_owner }} |
                 tr '[:upper:]' '[:lower:]')
         echo "Owner is $owner."
         echo "owner=$owner" >> $GITHUB_ENV

      - name: Install Dependencies
        run: |
          sudo apt-get update && \
          sudo apt-get install -y software-properties-common && \
          sudo add-apt-repository -y ppa:apptainer/ppa &&
          sudo apt-get update && \
          sudo apt-get install -y apptainer-suid

      - name: Build Container
        env:
          recipe: ${{ matrix.recipe }}
        run: sudo -E singularity build container.sif ${{ matrix.recipe }}

      - name: Install GPG Key
        id: gpgkey
        env:
          PASSPHRASE: ${{ secrets.PASSPHRASE }}
          GPGKEY: ${{ secrets.GPGKEY }}
        if: |
            env.PASSPHRASE != '' &&
            env.GPGKEY != ''
        run: |
            ## Key secret should replace newlines with "&&&" in secret.
            ##  Use perl -p -e 's/\n/&&&/' private.asc
            echo $GPGKEY | perl -p -e 's/&&&/\n/g' > private.asc
            sudo chown -R $USER:$(id -gn $USER) ~/.apptainer
            singularity key import private.asc < <(echo $PASSPHRASE)
            rm private.asc

      - name: Sign Container
        id: signsif
        if: |
            github.event_name != 'pull_request' &&
            steps.gpgkey.outcome == 'success'
        run: |
            singularity sign container.sif < <(echo ${{ secrets.PASSPHRASE }})

      - name: Login and Deploy Container
        if: |
            github.event_name != 'pull_request'
        run: |
            echo ${{ secrets.SINGULARITY_KEY }} > /tmp/s.key
            singularity remote login --tokenfile /tmp/s.key SylabsCloud
            singularity push -U container.sif \
              library://${owner}/${reponame}/${containername}:${tag}
