name: Singularity Build (native)
on: 
  push:
    # Edit the branches here if you want to change deploy behavior
    branches:
      - main
      - master

  # Do the builds on all pull requests (to test them)
  pull_request: []

  release:
    types: [created]

jobs:
  recipes:
    name: "Find Singularity recipes"
    runs-on: ubuntu-latest
    outputs:
      recipes: ${{ steps.ff.outputs.files }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Find recipe files (json output)
        id: ff
        run: |
          echo "::set-output name=files::$(
            find . -name "*Singularity*" |
            xargs -d \\n printf \"%s\", |
            sed -e 's/^/[/' -e 's/,$/]/'
          )"

  changes:
    name: "Changed Singularity Recipes"
    if: github.event_name != 'release'
    runs-on: ubuntu-latest
    outputs:
      recipes: ${{ steps.format.outputs.files }}
    steps:
      - id: files
        uses: jitterbit/get-changed-files@b17fbb00bdc0c0f63fcf166580804b4d2cdc2a42
        with:
          format: 'json'
      - name: Keep only singularity recipes
        id: filter
        uses: edwardgeorge/jq-action@main
        with:
          input: ${{ steps.files.outputs.added_modified }}
          script: '[.[] | select(test("Singularity"))]'
      - name: Format recipes
        id: format
        run: |
          remove_newlines() {
            tr -d "\n" <<< '${{ steps.filter.outputs.output }}' | \
              sed 's/^\[ "/["/'
          }
          echo "::set-output name=files::"$(remove_newlines)
  
  select_filelist:
    needs: [recipes, changes]
    if: ${{ needs.changes.result == 'success' ||
            github.event_name == 'release' }}
    runs-on: ubuntu-latest
    outputs:
      recipes: ${{ steps.select.outputs.files }}
    steps:
      - name: Select recipe list
        id: select
        run: |
          if ${{ github.event_name == 'release' }}; then
            echo '::set-output name=files::${{ needs.recipes.outputs.recipes }}'
          else
            echo '::set-output name=files::${{ needs.changes.outputs.recipes }}'
          fi
      - name: Print
        run: echo ${{ steps.select.outputs.files }}
  
  build-test-containers:
    needs:
      - select_filelist
    if: ${{ needs.select_filelist.outputs.recipes != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      # Keep going on other deployments if anything bloops
      fail-fast: false
      matrix:
        recipe: ${{ fromJson(needs.select_filelist.outputs.recipes) }}

    name: Build ${{ matrix.recipe }}
    steps:
      - name: Check out code for the container build
        uses: actions/checkout@v3

      - name: Compute Names
        env:
          recipe: ${{ matrix.recipe }}
        run: |
         if [ -f "${{ matrix.recipe }}" ]; then
            # Remove leading ./
            recipe_trimmed=${recipe#\.\/}
            # Match container name
            if [[ $recipe_trimmed =~ ^Singularity\.[^./[:space:]]+$ ]]; then
              # Singularity.name
              containername=${recipe_trimmed#Singularity\.}
            elif [[ $recipe_trimmed =~ ^[^./[:space:]]+/Singularity$ ]]; then
              # name/singularity
              containername=${recipe_trimmed%\/Singularity}
              # If the directory is "Singularity" or "singularity", use repo
              if [[ $containername =~ ^[Ss]ingularity$ ]]; then
                containername=${{ github.event.repository.name }}
              fi
            elif [[ $recipe_trimmed == "Singularity" ]]; then
              # Singularity
              containername=${{ github.event.repository.name }}
            else
              echo ERROR: Cannot determine container name from $recipe_trimmed
              exit 1
            fi
            # Build the container and name by tag
            echo "Container name is $containername."
            echo "containername=$containername" >> $GITHUB_ENV
         else
           echo "${{ matrix.recipe }} is not found."
           echo "Present working directory: $PWD"
           ls
         fi
         if ${{ github.event_name == 'release' && github.event.action == 'created' }}; then
           tag=${{ github.ref }}
           reponame=${{ github.event.repository.name }}
         else
           tag=${{ github.sha }}
           reponame=${{ github.event.repository.name }}_dev
         fi
         echo "Tag name is $tag."
         echo "tag=${{ github.ref }}" >> $GITHUB_ENV
         echo "Repo name is $reponame."
         echo "reponame=$reponame" >> $GITHUB_ENV
         owner=$(echo ${{ github.repository_owner }} |
                 tr '[:upper:]' '[:lower:]')
         echo "Owner is $owner."
         echo "owner=$owner" >> $GITHUB_ENV

      - name: Install Dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y \
            build-essential \
            libssl-dev \
            uuid-dev \
            libgpgme11-dev \
            squashfs-tools \
            libseccomp-dev \
            pkg-config

      - name: Set up Go 1.13
        uses: actions/setup-go@v1
        with:
          go-version: 1.13
        id: go

      - name: Install Singularity
        env:
          SINGULARITY_VERSION: 3.8.1
          GOPATH: /tmp/go
        run: |
          mkdir -p $GOPATH
          sudo mkdir -p /usr/local/var/singularity/mnt && \
          mkdir -p $GOPATH/src/github.com/sylabs && \
          cd $GOPATH/src/github.com/sylabs && \
          wget -qO- https://github.com/sylabs/singularity/releases/download/v${SINGULARITY_VERSION}/singularity-ce-${SINGULARITY_VERSION}.tar.gz | \
          tar xzv && \
          cd singularity-ce-${SINGULARITY_VERSION} && \
          ./mconfig -p /usr/local && \
          make -C builddir && \
          sudo make -C builddir install

      - name: Build Container
        env:
          recipe: ${{ matrix.recipe }}
        run: sudo -E singularity build container.sif ${{ matrix.recipe }}

      - name: Install GPG Key
        id: gpgkey
        env:
          PASSPHRASE: ${{ secrets.PASSPHRASE }}
          GPGKEY: ${{ secrets.GPGKEY }}
        if: |
            env.PASSPHRASE != '' &&
            env.GPGKEY != ''
        run: |
            ## Key secret should replace newlines with "&&&" in secret.
            ##  Use perl -p -e 's/\n/&&&/' private.asc
            echo $GPGKEY | perl -p -e 's/&&&/\n/g' > private.asc
            singularity key import private.asc < <(echo $PASSPHRASE)
            rm private.asc

      - name: Sign Container
        id: signsif
        if: |
            github.event_name != 'pull_request' &&
            steps.gpgkey.outcome == 'success'
        run: |
            singularity sign container.sif < <(echo ${{ secrets.PASSPHRASE }})

      - name: Login and Deploy Container
        if: |
            github.event_name != 'pull_request'
        run: |
            echo ${{ secrets.SINGULARITY_KEY }} > /tmp/s.key
            singularity remote login --tokenfile /tmp/s.key SylabsCloud
            singularity push -U container.sif \
              library://${owner}/${reponame}/${containername}:${tag}
